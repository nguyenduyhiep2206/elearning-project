import React, { createContext, useContext, useReducer, useEffect } from 'react';
import authService from '../services/auth.service';

// Tr·∫°ng th√°i ban ƒë·∫ßu c·ªßa authentication
const initialState = {
  user: null, // Th√¥ng tin ng∆∞·ªùi d√πng
  token: localStorage.getItem('token'), // Token x√°c th·ª±c t·ª´ localStorage
  isAuthenticated: false, // Tr·∫°ng th√°i ƒëƒÉng nh·∫≠p
  loading: true, // Tr·∫°ng th√°i loading
  error: null, // L·ªói n·∫øu c√≥
};

// C√°c lo·∫°i action cho reducer
const AuthActionTypes = {
  LOGIN_START: 'LOGIN_START', // B·∫Øt ƒë·∫ßu ƒëƒÉng nh·∫≠p
  LOGIN_SUCCESS: 'LOGIN_SUCCESS', // ƒêƒÉng nh·∫≠p th√†nh c√¥ng
  LOGIN_FAILURE: 'LOGIN_FAILURE', // ƒêƒÉng nh·∫≠p th·∫•t b·∫°i
  LOGOUT: 'LOGOUT', // ƒêƒÉng xu·∫•t
  SET_LOADING: 'SET_LOADING', // Set tr·∫°ng th√°i loading
  CLEAR_ERROR: 'CLEAR_ERROR', // X√≥a l·ªói
};

// Reducer ƒë·ªÉ qu·∫£n l√Ω state c·ªßa authentication
const authReducer = (state, action) => {
  switch (action.type) {
    case AuthActionTypes.LOGIN_START:
      return {
        ...state,
        loading: true, // B·∫Øt ƒë·∫ßu loading
        error: null, // X√≥a l·ªói c≈©
      };
    case AuthActionTypes.LOGIN_SUCCESS:
      return {
        ...state,
        user: action.payload.user, // L∆∞u th√¥ng tin user
        token: action.payload.token, // L∆∞u token
        isAuthenticated: true, // ƒê√°nh d·∫•u ƒë√£ ƒëƒÉng nh·∫≠p
        loading: false, // K·∫øt th√∫c loading
        error: null, // Kh√¥ng c√≥ l·ªói
      };
    case AuthActionTypes.LOGIN_FAILURE:
      return {
        ...state,
        user: null, // X√≥a th√¥ng tin user
        token: null, // X√≥a token
        isAuthenticated: false, // ƒê√°nh d·∫•u ch∆∞a ƒëƒÉng nh·∫≠p
        loading: false, // K·∫øt th√∫c loading
        error: action.payload, // L∆∞u l·ªói
      };
    case AuthActionTypes.LOGOUT:
      return {
        ...state,
        user: null, // X√≥a th√¥ng tin user
        token: null, // X√≥a token
        isAuthenticated: false, // ƒê√°nh d·∫•u ch∆∞a ƒëƒÉng nh·∫≠p
        loading: false, // K·∫øt th√∫c loading
        error: null, // X√≥a l·ªói
      };
    case AuthActionTypes.SET_LOADING:
      return {
        ...state,
        loading: action.payload, // Set tr·∫°ng th√°i loading
      };
    case AuthActionTypes.CLEAR_ERROR:
      return {
        ...state,
        error: null, // X√≥a l·ªói
      };
    default:
      return state; // Tr·∫£ v·ªÅ state hi·ªán t·∫°i n·∫øu kh√¥ng c√≥ action n√†o kh·ªõp
  }
};

// T·∫°o AuthContext
const AuthContext = createContext();

// Component AuthProvider ƒë·ªÉ cung c·∫•p context cho to√†n b·ªô app
export const AuthProvider = ({ children }) => {
  const [state, dispatch] = useReducer(authReducer, initialState);

  // Ki·ªÉm tra xem user ƒë√£ ƒëƒÉng nh·∫≠p ch∆∞a khi app kh·ªüi ƒë·ªông
  useEffect(() => {
    const checkAuth = async () => {
      const token = localStorage.getItem('token');
      if (token) {
        try {
          // Verify token v·ªõi backend
          const response = await authService.verifyToken();
          dispatch({
            type: AuthActionTypes.LOGIN_SUCCESS,
            payload: {
              user: response.data.user,
              token,
            },
          });
        } catch (error) {
          // N·∫øu c√≥ l·ªói, x√≥a token v√† user kh·ªèi localStorage
          localStorage.removeItem('token');
          localStorage.removeItem('user');
          dispatch({ type: AuthActionTypes.LOGOUT });
        }
      } else {
        // N·∫øu kh√¥ng c√≥ token, set loading = false
        dispatch({ type: AuthActionTypes.SET_LOADING, payload: false });
      }
    };

    checkAuth();
  }, []);

  // H√†m ƒëƒÉng nh·∫≠p
  const login = async (credentials) => {
    console.log('üîê AuthContext: B·∫Øt ƒë·∫ßu login process');
    dispatch({ type: AuthActionTypes.LOGIN_START });
    try {
      console.log('üì° AuthContext: G·ªçi authService.login...');
      // G·ªçi API ƒëƒÉng nh·∫≠p t·ª´ backend
      const response = await authService.login(credentials);
      
      console.log('‚úÖ AuthContext: Login th√†nh c√¥ng, response:', response);

      // L∆∞u token v√† user v√†o localStorage
      localStorage.setItem('token', response.data.token);
      localStorage.setItem('user', JSON.stringify(response.data.user));

      dispatch({
        type: AuthActionTypes.LOGIN_SUCCESS,
        payload: response.data,
      });

      return response.data;
    } catch (error) {
      console.log('‚ùå AuthContext: Login th·∫•t b·∫°i, error:', error.message);
      dispatch({
        type: AuthActionTypes.LOGIN_FAILURE,
        payload: error.message || 'ƒêƒÉng nh·∫≠p th·∫•t b·∫°i',
      });
      throw error;
    }
  };

  // H√†m ƒëƒÉng xu·∫•t
  const logout = async () => {
    try {
      // G·ªçi API ƒëƒÉng xu·∫•t t·ª´ backend
      await authService.logout();
    } catch (error) {
      // N·∫øu c√≥ l·ªói khi g·ªçi API, v·∫´n ti·∫øp t·ª•c ƒëƒÉng xu·∫•t local
      console.error('Logout API error:', error);
    } finally {
      // X√≥a token v√† user kh·ªèi localStorage
      localStorage.removeItem('token');
      localStorage.removeItem('user');
      dispatch({ type: AuthActionTypes.LOGOUT });
    }
  };

  // H√†m x√≥a l·ªói
  const clearError = () => {
    dispatch({ type: AuthActionTypes.CLEAR_ERROR });
  };

  // Gi√° tr·ªã context bao g·ªìm state v√† c√°c h√†m
  const value = {
    ...state,
    login,
    logout,
    clearError,
  };

  return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>;
};

// Custom hook ƒë·ªÉ s·ª≠ d·ª•ng auth context
export const useAuth = () => {
  const context = useContext(AuthContext);
  if (!context) {
    throw new Error('useAuth must be used within an AuthProvider');
  }
  return context;
};
